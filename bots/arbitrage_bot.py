import asyncio
import logging
from src.exchanges import fetch_prices
from src.notifier import send_telegram_alert
from src.database import log_spread
from configs import EXCHANGES, SPREAD_THRESHOLD, EXCHANGE_FEES
from utils.helpers import now_utc_str, format_usd

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

async def run_bot(mode="test", balance=1000, exchanges=["binance", "kraken"], symbol="BTC/USDT"):
    """
    Ch·∫°y bot arbitrage ƒë·ªÉ ki·ªÉm tra ch√™nh l·ªách gi√° gi·ªØa c√°c s√†n
    
    Args:
        mode (str): "live" ƒë·ªÉ g·ª≠i c·∫£nh b√°o th·ª±c, "test" ch·ªâ ghi log
        balance (float): S·ªë ti·ªÅn m√¥ ph·ªèng ƒë·ªÉ t√≠nh l·ª£i nhu·∫≠n
        exchanges (list): Danh s√°ch c√°c s√†n giao d·ªãch c·∫ßn ki·ªÉm tra
        symbol (str): C·∫∑p ti·ªÅn t·ªá ƒë·ªÉ ki·ªÉm tra (v√≠ d·ª•: "BTC/USDT")
    """
    try:
        # X√°c th·ª±c ƒë·ªãnh d·∫°ng symbol
        if '/' not in symbol:
            logger.error(f"‚ùå ƒê·ªãnh d·∫°ng symbol kh√¥ng h·ª£p l·ªá: {symbol}. ƒê·ªãnh d·∫°ng mong ƒë·ª£i: BTC/USDT")
            return
            
        # Step 1: Fetch prices
        prices = await fetch_prices(exchanges, symbol)

        if len(prices) < 2:
            logger.warning("‚ö†Ô∏è Kh√¥ng ƒë·ªß s√†n ƒë·ªÉ so s√°nh. C·∫ßn √≠t nh·∫•t 2 s√†n.")
            return

        # Step 2: Find best buy/sell prices
        sorted_prices = sorted(prices, key=lambda x: x['price'])
        best_buy = sorted_prices[0]
        best_sell = sorted_prices[-1]

        buy_price = best_buy['price']
        sell_price = best_sell['price']
        buy_ex = best_buy['exchange']
        sell_ex = best_sell['exchange']

        # Step 3: T√≠nh ph√≠ giao d·ªãch
        buy_fee = EXCHANGE_FEES.get(buy_ex, 0)
        sell_fee = EXCHANGE_FEES.get(sell_ex, 0)

        # Gi√° hi·ªáu d·ª•ng sau ph√≠
        effective_buy = buy_price * (1 + buy_fee)
        effective_sell = sell_price * (1 - sell_fee)

        # Spread sau ph√≠
        net_spread = ((effective_sell - effective_buy) / effective_buy) * 100

        # Step 4: N·∫øu spread v∆∞·ª£t ng∆∞·ª°ng, g·ª≠i c·∫£nh b√°o v√† log
        if net_spread >= SPREAD_THRESHOLD:
            coin_amount = balance / effective_buy
            profit = (effective_sell - effective_buy) * coin_amount

            # Log th√¥ng tin v·ªÅ c∆° h·ªôi arbitrage
            log_spread(
                symbol=symbol,
                ex_buy=buy_ex,
                price_buy=buy_price,
                ex_sell=sell_ex,
                price_sell=sell_price,
                spread=net_spread,
                mode=mode
            )

            # T·∫°o n·ªôi dung th√¥ng b√°o
            message = (
                f"üö® [ARBITRAGE ALERT] {symbol}\n"
                f"üü¢ BUY  from {buy_ex.upper()} @ {format_usd(buy_price)} (+{buy_fee*100:.2f}% fee)\n"
                f"üî¥ SELL to   {sell_ex.upper()} @ {format_usd(sell_price)} (-{sell_fee*100:.2f}% fee)\n"
                f"üí• Net Spread (after fees): {net_spread:.2f}%\n"
                f"üí∞ Simulated Profit on ${balance}: {format_usd(profit)}\n"
                f"üìÖ {now_utc_str()} | Mode: {mode.upper()}"
            )
            
            # Ch·ªâ g·ª≠i c·∫£nh b√°o n·∫øu l√† mode live
            if mode.lower() == "live":
                logger.info(f"ƒê√£ ph√°t hi·ªán c∆° h·ªôi arbitrage: {buy_ex} -> {sell_ex}, spread: {net_spread:.2f}%")
                await send_telegram_alert(message)
            else:
                logger.info(f"[TEST MODE] Ph√°t hi·ªán c∆° h·ªôi arbitrage nh∆∞ng kh√¥ng g·ª≠i c·∫£nh b√°o")
                logger.info(f"N·ªôi dung th√¥ng b√°o:\n{message}")

        else:
            logger.debug(f"Spread sau ph√≠ {net_spread:.2f}% < threshold {SPREAD_THRESHOLD}%, b·ªè qua.")

    except Exception as e:
        logger.error(f"‚ùå L·ªói trong run_bot: {e}", exc_info=True)
        # L·ªói nghi√™m tr·ªçng, th√¥ng b√°o r√µ r√†ng
        if mode.lower() == "live":
            error_message = f"‚ö†Ô∏è Bot g·∫∑p l·ªói: {str(e)}\nTh·ªùi gian: {now_utc_str()}"
            await send_telegram_alert(error_message)