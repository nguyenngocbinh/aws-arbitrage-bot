import argparse
import asyncio
import logging
import signal
import sys
from bots.arbitrage_bot import run_bot
from configs import EXCHANGES
from utils.helpers import now_utc_str
from src.database import init_db

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def parse_args():
    """ Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh """
    parser = argparse.ArgumentParser(description="Crypto Arbitrage Bot")
    
    # C√°c tham s·ªë b·∫Øt bu·ªôc
    parser.add_argument('--mode', required=True, choices=['live', 'test'], help="Ch·∫ø ƒë·ªô ch·∫°y: live ho·∫∑c test")
    parser.add_argument('--balance', required=True, type=float, help="S·ªë d∆∞ t√†i kho·∫£n cho m·ªói giao d·ªãch")
    parser.add_argument('--exchanges', required=True, nargs='+', help="Danh s√°ch c√°c s√†n giao d·ªãch tham gia")
    
    # Tham s·ªë t√πy ch·ªçn
    parser.add_argument('--symbol', default="BTC/USDT", help="C·∫∑p giao d·ªãch (m·∫∑c ƒë·ªãnh l√† BTC/USDT)")
    parser.add_argument('--interval', default=60, type=int, help="Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ki·ªÉm tra (gi√¢y)")

    return parser.parse_args()

def signal_handler(sig, frame):
    """X·ª≠ l√Ω khi nh·∫≠n t√≠n hi·ªáu k·∫øt th√∫c"""
    logger.info("\nƒêang d·ª´ng bot m·ªôt c√°ch an to√†n...")
    sys.exit(0)

async def main():
    # ƒêƒÉng k√Ω handler cho t√≠n hi·ªáu SIGINT (Ctrl+C)
    signal.signal(signal.SIGINT, signal_handler)
    
    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
    init_db()
    
    # Ph√¢n t√≠ch tham s·ªë
    args = parse_args()
    
    # Ki·ªÉm tra xem s√†n giao d·ªãch c√≥ h·ª£p l·ªá kh√¥ng
    valid_exchanges = {ex[0] for ex in EXCHANGES}
    invalid_exchanges = set(args.exchanges) - valid_exchanges
    
    if invalid_exchanges:
        logger.error(f"‚ö†Ô∏è L·ªói: C√°c s√†n giao d·ªãch kh√¥ng h·ª£p l·ªá: {', '.join(invalid_exchanges)}")
        logger.info(f"C√°c s√†n h·ª£p l·ªá: {', '.join(valid_exchanges)}")
        return
    
    # In th√¥ng tin c·∫•u h√¨nh bot
    logger.info(f"\nüîß C·∫•u h√¨nh Crypto Arbitrage Bot")
    logger.info(f"üîß Ch·∫ø ƒë·ªô: {args.mode}")
    logger.info(f"üí∞ S·ªë d∆∞: {args.balance} USD")
    logger.info(f"üíπ C√°c s√†n tham gia: {', '.join(args.exchanges)}")
    logger.info(f"üîó C·∫∑p giao d·ªãch: {args.symbol}")
    logger.info(f"‚è±Ô∏è Kho·∫£ng th·ªùi gian ki·ªÉm tra: {args.interval} gi√¢y")
    logger.info(f"‚è∞ Th·ªùi gian b·∫Øt ƒë·∫ßu: {now_utc_str()}")
    
    # Ch·∫°y bot li√™n t·ª•c v·ªõi x·ª≠ l√Ω l·ªói
    try:
        run_count = 0
        consecutive_errors = 0
        while True:
            try:
                run_count += 1
                logger.debug(f"ƒêang ch·∫°y ki·ªÉm tra l·∫ßn th·ª© {run_count}...")
                
                # Ch·∫°y bot v·ªõi tham s·ªë t·ª´ d√≤ng l·ªánh
                await run_bot(
                    mode=args.mode,
                    balance=args.balance,
                    exchanges=args.exchanges,
                    symbol=args.symbol
                )
                
                # ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm l·ªói khi th√†nh c√¥ng
                consecutive_errors = 0
                
                # Ch·ªù ƒë·∫øn l·∫ßn ki·ªÉm tra ti·∫øp theo
                logger.debug(f"üïí ƒêang ch·ªù {args.interval} gi√¢y cho l·∫ßn ki·ªÉm tra ti·∫øp theo...")
                await asyncio.sleep(args.interval)
                
            except Exception as e:
                consecutive_errors += 1
                # TƒÉng th·ªùi gian ch·ªù theo c·∫•p s·ªë nh√¢n nh∆∞ng gi·ªõi h·∫°n t·ªëi ƒëa
                wait_time = min(10 * (2 ** consecutive_errors), 300)  # Gi·ªõi h·∫°n ·ªü 5 ph√∫t
                
                logger.error(f"‚ùå L·ªói khi ch·∫°y bot: {e}", exc_info=True)
                logger.info(f"‚è≥ ƒêang ch·ªù {wait_time} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                await asyncio.sleep(wait_time)
    
    except KeyboardInterrupt:
        logger.info("\nBot ƒë√£ d·ª´ng l·∫°i do ng∆∞·ªùi d√πng nh·∫•n Ctrl+C.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nBot ƒë√£ d·ª´ng l·∫°i.")